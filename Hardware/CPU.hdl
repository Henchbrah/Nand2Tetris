// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

     PARTS:

        // Interpret instruction
        
        Mux16(a=false,b=instruction,sel=instruction[15],out[15]=CorA,out[12]=a,out[11]=c1,out[10]=c2,out[9]=c3,out[8]=c4,out[7]=c5,
              out[6]=c6,out[5]=d1,out[4]=d2,out[3]=writeM,out[2]=j1,out[1]=j2,out[0]=j3);    
        
        
            

        // A Register

        Not(in=CorA,out=isAcommand);
        Or(a=isAcommand,b=d1,out=ALoad);
        Mux16(a=instruction,b=ALUOut,sel=CorA,out=ARegIn); // choose between instruction or in ALU output
        ARegister(in=ARegIn,load=ALoad,out=ARegOut,out[0..14]=addressM); 

        // D Register
        DRegister(in=ALUOut,load=d2,out=x);  // load ALU output if d2=1
        
        //ALU
        Mux16(a=ARegOut,b=inM,sel=a,out=y);
        ALU(x=x,y=y,zx=c1,nx=c2,zy=c3,ny=c4,f=c5,no=c6,out=outM,out=ALUOut,zr=zr,ng=ng);

        //PC
               // these line to determine if a jmp is applicable
        And(a=j1,b=ng,out=cond1);
        And(a=j2,b=zr,out=cond2);
        Or(a=zr,b=ng,out=islessthan);
        Not(in=islessthan,out=greaterthan);
        And(a=j3,b=greaterthan,out=cond3);
        Or(a=cond1,b=cond2,out=cond1or2);
        Or(a=cond1or2,b=cond3,out=Load);
        And(a=CorA,b=Load,out=pcLoad);
               
        PC(in=ARegOut,load=pcLoad,inc=true,reset=reset,out[0..14]=pc);
         
}


